---

extra_includes:
- frc2/command/ParallelCommandGroup.h
- frc2/command/ParallelRaceGroup.h
- frc2/command/ParallelDeadlineGroup.h
- frc2/command/SequentialCommandGroup.h
- frc2/command/PerpetualCommand.h
- frc2/command/ProxyScheduleCommand.h
- src/helpers.h

inline_code: |
  #include <src/Command.cpp.inl>

functions:
  GetTypeName:
    ignore: true
  RequirementsDisjoint:
  Command_WithTimeout:
    ignore: true
  Command_WithInterrupt:
    ignore: true
  Command_BeforeStarting:
    ignore: true
  Command_AndThen:
    ignore: true
  Command_Perpetually:
    ignore: true
  Command_AsProxy:
    ignore: true
  Command_Schedule:
    ignore: true
  Command_Schedule:
    overloads:
      std::shared_ptr<frc2::Command>:
        ignore: true
      std::shared_ptr<frc2::Command>, bool:
        ignore: true
classes:
  Command:
    shared_ptr: true
    attributes:
      m_isGrouped:
    methods:
      Command:
      Initialize:
      Execute:
      End:
      IsFinished:
      GetRequirements:
      WithTimeout:
        cpp_code: |
          &Command_WithTimeout
      WithInterrupt:
        cpp_code: |
          &Command_WithInterrupt
      BeforeStarting:
        overloads:
          std::function<void ( )>, std::initializer_list<std::shared_ptr<Subsystem>>:
            ignore: true
          std::function<void ( )>, wpi::ArrayRef<std::shared_ptr<Subsystem>>:
            cpp_code: |
              &Command_BeforeStarting
      AndThen:
        overloads:
          std::function<void ( )>, std::initializer_list<std::shared_ptr<Subsystem>>:
            ignore: true
          std::function<void ( )>, wpi::ArrayRef<std::shared_ptr<Subsystem>>:
            cpp_code: |
              &Command_AndThen
      Perpetually:
        cpp_code: |
          &Command_Perpetually
      AsProxy:
        cpp_code: |
          &Command_AsProxy
      Schedule:
        overloads:
          bool:
            cpp_code: |
              [](std::shared_ptr<Command> self, bool interruptable) {
                Command_Schedule(self, interruptable);
              }
          "":
            cpp_code: |
              [](std::shared_ptr<Command> self) { Command_Schedule(self, true); }
      Cancel:
      IsScheduled:
      HasRequirement:
      IsGrouped:
      SetGrouped:
      RunsWhenDisabled:
      GetName:
